/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.3.1
 * Fri, 26 May 2023 05:14:16 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

var PL = {};
// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    // utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setCSSRuleStyle puzzle
function setCSSRuleStyle(prop, value, id, isParent, mediaRule) {
    var styles = (isParent) ? parent.document.styleSheets : document.styleSheets;
    for (var i = 0; i < styles.length; i++) {
        /**
         * workaround for "DOMException: Failed to read the 'cssRules' property
         * from 'CSSStyleSheet': Cannot access rules"
         */
        try { var cssRules = styles[i].cssRules; }
        catch (e) { continue; }

        for (var j = 0; j < cssRules.length; j++) {
            var cssRule = cssRules[j];
            if (!mediaRule && cssRule.selectorText == id)
                cssRule.style[prop] = value;
            else if (mediaRule && cssRule.media && cssRule.media.mediaText == mediaRule) {
                var cssRulesMedia = cssRule.cssRules;
                for (var k = 0; k < cssRulesMedia.length; k++) {
                    if (cssRulesMedia[k].selectorText == id)
                        cssRulesMedia[k].style[prop] = value;
                }
            }
        }
    }
}



// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = false;
_initGlob.output.initOptions.useFullscreen = false;

setCSSRuleStyle('backgroundImage', 'url("manitou.png")', '.v3d-simple-preloader-logo', false, '');

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["stop"] = stop2;
this.procedures["stablower"] = stablower2;
this.procedures["stabraise"] = stabraise2;
this.procedures["turnleft"] = turnleft2;
this.procedures["turnright"] = turnright2;
this.procedures["boomraise"] = boomraise2;
this.procedures["boomlower"] = boomlower2;
this.procedures["telesextend"] = telesextend2;
this.procedures["telesretract"] = telesretract2;
this.procedures["boomlowerdeact"] = boomlowerdeact2;
this.procedures["boomclicked"] = boomclicked2;
this.procedures["boomloweract"] = boomloweract;
this.procedures["boomnotclicked"] = boomnotclicked;
this.procedures["boomraisedeact"] = boomraisedeact2;
this.procedures["chassisclicked"] = chassisclicked2;
this.procedures["boomraiseact"] = boomraiseact;
this.procedures["telesextenddeact"] = telesextenddeact2;
this.procedures["chassisnotclicked"] = chassisnotclicked;
this.procedures["telesextendact"] = telesextendact;
this.procedures["aucunclicked"] = aucunclicked2;
this.procedures["telesretractdeact"] = telesretractdeact2;
this.procedures["telesretractact"] = telesretractact;
this.procedures["aucunnotclicked"] = aucunnotclicked;
this.procedures["stabraisedeact"] = stabraisedeact2;
this.procedures["stabraiseact"] = stabraiseact;
this.procedures["stablowerdeact"] = stablowerdeact2;
this.procedures["stabloweract"] = stabloweract;

var turnleft, button, turnright, boomlowerdeact, boomclicked, boomraisedeact, chassisclicked, telesextenddeact, aucunclicked, telesretractdeact, stabraisedeact, stablowerdeact, stablower, stabraise, contact, contact2, boomraise, contactwheel, boomlower, telesextend, telesretract;

// getEventProperty puzzle
function getEventProperty(prop, event) {
    if (typeof event != "undefined") {
        switch (prop) {
            case 'target.checked':
                return event.target.checked;
            case 'target.id':
                return event.target.id;
            case 'target.value':
                return event.target.value;
            case 'touches.length':
                return event.touches ? event.touches.length : 0;
            case 'touches[0].pageX':
                return event.touches[0].pageX;
            case 'touches[0].pageY':
                return event.touches[0].pageY;
            case 'touches[1].pageX':
                return event.touches[1].pageX;
            case 'touches[1].pageY':
                return event.touches[1].pageY;
            case 'targetTouches.length':
                return event.targetTouches ? event.targetTouches.length : 0;
            case 'targetTouches[0].pageX':
                return event.targetTouches[0].pageX;
            case 'targetTouches[0].pageY':
                return event.targetTouches[0].pageY;
            case 'targetTouches[1].pageX':
                return event.targetTouches[1].pageX;
            case 'targetTouches[1].pageY':
                return event.targetTouches[1].pageY;
            default:
                return event[prop];
        }
    }
}

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

function _checkListenersSame(target0, type0, listener0, optionsOrUseCapture0,
        target1, type1, listener1, optionsOrUseCapture1) {
    const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
            ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
    const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
            ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
    return target0 === target1 && type0 === type1 && listener0 === listener1
            && capture0 === capture1;
}

/**
 * Add the specified event listener to the specified target. This function also
 * stores listener data for easier disposing.
 */
function bindListener(target, type, listener, optionsOrUseCapture) {
    const alreadyExists = _pGlob.eventListeners.some(elem => {
        return _checkListenersSame(elem.target, elem.type, elem.listener,
                elem.optionsOrUseCapture, target, type, listener,
                optionsOrUseCapture);
    });

    if (!alreadyExists) {
        target.addEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.push({ target, type, listener, optionsOrUseCapture });
    }
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        bindListener(elem, eventType, callback);
    }
}

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    if (appInstance.scene) {
        appInstance.scene.traverse(function(obj) {
            if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
                objFound = obj;
                if (runTime) {
                    _pGlob.objCache[objName] = objFound;
                }
            }
        });
    }
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}

/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && 'coordSystem' in scene.userData) {
        return scene.userData.coordSystem;
    }

    return 'Y_UP_RIGHT';
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
const eulerV3DToBlenderShortest = function() {

    const eulerTmp = new v3d.Euler();
    const eulerTmp2 = new v3d.Euler();
    const vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        const eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        const eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        const len = vec3Tmp.setFromEuler(eulerBlender).lengthSq();
        const lenAlt = vec3Tmp.setFromEuler(eulerBlenderAlt).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();

// dragRotate puzzle
function dragRotate(objSelector, mode, isParentSpace, blockId, parentDragOverBlockId) {
    var camera = appInstance.getCamera(true);
    if (!camera)
        return;

    if (!_pGlob.objDragOverInfoByBlock)
        return;

    var objNames = retrieveObjectNames(objSelector);

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var coordSystem = getCoordSystem();

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        if (mode == "X" || mode == "Y" || mode == "Z") {
            var objPos = obj.getWorldPosition(_pGlob.vec3Tmp);
            objPos.project(camera);

            var objX = (objPos.x + 1) / 2 * appInstance.getWidth();
            var objY = (-objPos.y + 1) / 2 * appInstance.getHeight();
            var vecFrom = _pGlob.vec2Tmp.set(info.prevX - objX, objY - info.prevY);
            var vecTo = _pGlob.vec2Tmp2.set(info.currX - objX, objY - info.currY);

            if (coordSystem == 'Z_UP_RIGHT')
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y));
            else
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z));

            var quat = _pGlob.quatTmp.setFromAxisAngle(axis, vecTo.angle() - vecFrom.angle());

            // a rotation axis pointing backwards (i.e. co-directionally
            // aligned with the view vector) should have inverted rotation
            var objToCalcSpace = isParentSpace && obj.parent ? obj.parent : obj;
            axis.applyQuaternion(objToCalcSpace.getWorldQuaternion(_pGlob.quatTmp2));

            var viewVec = camera.getWorldDirection(_pGlob.vec3Tmp2);
            if (viewVec.dot(axis) > 0) {
                quat.conjugate();
            }

            if (isParentSpace) {
                obj.quaternion.premultiply(quat);
            } else {
                obj.quaternion.multiply(quat);
            }
            obj.updateMatrixWorld(true);
        }
    }
}

// objConstraintAddCopy puzzle
function objConstraintAddCopy(constraintName, targetObjName, objSelector, mode) {

    if (!targetObjName) return;
    var targetObj = getObjectByName(targetObjName);
    if (!targetObj) return;

    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        if (!objNames[i]) continue;
        var obj = getObjectByName(objNames[i]);
        if (!obj || !obj.constraints) continue;

        for (var j = obj.constraints.length - 1; j >= 0; j--) {
            if (obj.constraints[j].name == constraintName) {
                obj.constraints.splice(j, 1);
            }
        }

        if (mode == 'POS') {
            var cons = new v3d.CopyLocationConstraint(targetObj);
        } else if (mode == 'ROT') {
            var cons = new v3d.CopyRotationConstraint(targetObj);
            cons.fixCameraLightRotation = true;
        } else if (mode == 'SCALE') {
            var cons = new v3d.CopyScaleConstraint(targetObj);
        } else if (mode == 'TRANSFORM') {
            var cons = new v3d.CopyTransformsConstraint(targetObj);
        }

        cons.name = constraintName;
        obj.constraints.push(cons);
    }
}

function eventGetOffsetCoords(e, touchId, dest) {
    if (e instanceof MouseEvent) {
        dest.set(e.offsetX, e.offsetY);
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        var rect = e.target.getBoundingClientRect();
        var touches = e.touches;
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            touches = e.changedTouches;
        }

        var touch = touches[0];
        for (var i = 0; i < touches.length; i++) {
            if (touches[i].identifier == touchId) {
                touch = touches[i];
                break;
            }
        }

        dest.set(touch.clientX - rect.left, touch.clientY - rect.top);
    }
    return dest;
}

function eventTouchIdGetFirst(e) {
    if (e instanceof MouseEvent) {
        return -1;
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            return e.changedTouches[0].identifier;
        } else {
            return e.touches[0].identifier;
        }
    }
    return -1;
}

/**
 * For "touchstart", "touchend" and "touchmove" events returns true if a touch
 * object with the provided touch id is in the changedTouches array, otherwise
 * - false. For other events returns true.
 */
function eventTouchIdChangedFilter(e, touchId) {
    if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            var isChanged = false;
            for (var i = 0; i < e.changedTouches.length; i++) {
                if (e.changedTouches[i].identifier == touchId) {
                    isChanged = true;
                    break;
                }
            }
            return isChanged;
        }
    }

    return true;
}

function initDragOverInfo() {
    return {
        draggedObjName: '',
        downX: 0, downY: 0,
        prevX: 0, prevY: 0,
        currX: 0, currY: 0,
        isDowned: false,
        isMoved: false,
        touchId: -1
    };
}

/**
 * Remove the specified event listener from the specified target.
 */
function unbindListener(target, type, listener, optionsOrUseCapture) {
    const index = _pGlob.eventListeners.findIndex(elem => {
        return _checkListenersSame(elem.target, elem.type, elem.listener,
            elem.optionsOrUseCapture, target, type, listener,
            optionsOrUseCapture);
    });

    if (index !== -1) {
        target.removeEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.splice(index, 1);
    }
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    bindListener(elem, eventType, pickListener);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, pickListener);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, doubleTapCallback);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList, false);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}

// whenDraggedOver puzzle
_pGlob.objDragOverInfoGlobal = [];
_pGlob.objDragOverInfoByBlock = {}

initObjectPicking(function(intersects, downEvent) {

    _pGlob.objDragOverInfoGlobal.forEach(function(el) {

        if (downEvent instanceof MouseEvent)
            if (el.mouseButtons.indexOf(downEvent.button) == -1)
                return;

        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj([el.objName], objName)) {
                el.callback({ downEvent: downEvent, draggedObjName: objName });
            }

        }

    });

}, 'mousedown', true);

// whenDraggedOver puzzle
function registerOnDrag(objSelector, xRay, mouseButtons, cbStart, cbMove, cbDrop, blockId) {

    var cb = function(cbParam) {

        if (appInstance.controls) {
            appInstance.controls.enabled = false;
        }

        if (!(blockId in _pGlob.objDragOverInfoByBlock)) {
            _pGlob.objDragOverInfoByBlock[blockId] = initDragOverInfo();
        }
        var info = _pGlob.objDragOverInfoByBlock[blockId];

        // NOTE: don't use more than one pointing event, e.g. don't process
        // some events related to multitouch actions
        if (info.isDowned) {
            return;
        }

        var touchId = eventTouchIdGetFirst(cbParam.downEvent);
        var coords = eventGetOffsetCoords(cbParam.downEvent, touchId,
                _pGlob.vec2Tmp);

        info.downX = info.prevX = info.currX = coords.x;
        info.downY = info.prevY = info.currY = coords.y;
        info.touchId = touchId;
        info.isDowned = true;
        info.isMoved = false;
        info.draggedObjName = cbParam.draggedObjName;

        cbStart(cbParam.downEvent);

        var elem = appInstance.container;

        var moveCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.prevX = info.currX;
            info.prevY = info.currY;
            info.currX = coords.x;
            info.currY = coords.y;
            cbMove(e);
            info.isMoved = true;
        }
        var upCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.currX = coords.x;
            info.currY = coords.y;
            info.prevX = info.currX;
            info.prevY = info.currY;
            cbDrop(e);
            info.isDowned = false;

            unbindListener(elem, 'mousemove', moveCb);
            unbindListener(elem, 'touchmove', moveCb);
            unbindListener(elem, 'mouseup', upCb);
            unbindListener(elem, 'touchend', upCb);
            if (appInstance.controls) {
                appInstance.controls.enabled = true;
            }
        }

        bindListener(elem, 'mousemove', moveCb);
        bindListener(elem, 'touchmove', moveCb);
        bindListener(elem, 'mouseup', upCb);
        bindListener(elem, 'touchend', upCb);
    }

    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        _pGlob.objDragOverInfoGlobal.push({
            objName: objName,
            callback: cb,
            xRay: xRay,
            mouseButtons: mouseButtons
        });
    }
}

/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}

/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && 'animFrameRate' in scene.userData) {
        return scene.userData.animFrameRate;
    }
    return 24;
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished)) {
            bindListener(appInstance.mixer, 'finished', onMixerFinished);
        }
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// Describe this function...
function stop2() {

  operateAnimation('PAUSE', 'Armchassis', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Armtourelle', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Armbras', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Armtablier', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Armtelescope', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('PAUSE', 'Cam', null, null, 'AUTO', 1,
          function() {}, false);

      stablower = 'stop';
  stabraise = 'stop';
  turnleft = 'stop';
  turnright = 'stop';
  boomraise = 'stop';
  boomlower = 'stop';
  telesextend = 'stop';
  telesretract = 'stop';
}

// isObjectVisible puzzle
function isObjectVisible(objSelector) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (obj.visible)
            return true;
    }
    return false;
}

// getAnimationFrame puzzle
function getAnimationFrame(animName) {
    if (!animName)
        return;
    var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
    if (action) {
        var scene = getSceneByAction(action);
        var frameRate = getSceneAnimFrameRate(scene);
        return action.time * frameRate;
    } else {
        return;
    }
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// onAnimationFrameDo puzzle

_pGlob.animTriggers = [];

function processAnimTriggers() {
    _pGlob.animTriggers.forEach(function(animTrigger) {
        const action = animTrigger.action;
        if (action.timeScale > 0 && action.time >= animTrigger.time && animTrigger.time > animTrigger.prevTime)
            animTrigger.callback();

        else if (action.timeScale < 0 && action.time <= animTrigger.time && animTrigger.time < animTrigger.prevTime)
            animTrigger.callback();

        animTrigger.prevTime = action.time;
    });
}

appInstance.renderCallbacks.push(processAnimTriggers);
if (PL.editorRenderCallbacks)
    PL.editorRenderCallbacks.push([appInstance, processAnimTriggers]);

function onAnimationFrameDo(animSelector, frame, callback) {
    if (!animSelector)
        return;
    // input can be either single obj or array of objects
    if (typeof animSelector == "string")
        animSelector = [animSelector];

    for (let i = 0; i < animSelector.length; i++) {
        const animName = animSelector[i];
        if (animName) {
            const action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
            if (!action)
                continue;

            const scene = getSceneByAction(action);
            const frameRate = getSceneAnimFrameRate(scene);

            _pGlob.animTriggers.push({
                action: action,
                time: frame ? frame/frameRate : 0,
                prevTime: action.time,
                callback: callback
            });

        }
    }

}

// Describe this function...
function stablower2() {

  operateAnimation('SET_SPEED', 'Armchassis', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Armchassis', null, null, 'AUTO', 1,
          function() {}, false);

      stablower = 'stablower';
  onAnimationFrameDo('Armchassis', 233, function() {

    operateAnimation('PAUSE', 'Armchassis', null, null, 'AUTO', 1,
            function() {}, false);

        });
}

// everyFrame puzzle
function registerEveryFrame(callback) {
    if (typeof callback == 'function') {
        appInstance.renderCallbacks.push(callback);
        if (PL.editorRenderCallbacks)
            PL.editorRenderCallbacks.push([appInstance, callback]);
    }
}

// Describe this function...
function stabraise2() {
  if (!(contact == 'true' && contactwheel == 'false')) {

    operateAnimation('SET_SPEED', 'Armchassis', null, null, 'AUTO', 1,
            function() {}, true);


    operateAnimation('RESUME', 'Armchassis', null, null, 'AUTO', 1,
            function() {}, false);

        stabraise = 'stabraise';
  }
  registerEveryFrame(function() {
    if (contact == 'true' && contactwheel == 'false') {

      operateAnimation('PAUSE', 'Armchassis', null, null, 'AUTO', 1,
              function() {}, false);

          contact2 = 'true';
    } else {
      contact2 = 'false';
    }
  });
}

// callJSFunction puzzle
function getJSFunction(funcName) {
    var jsFunc = appInstance.ExternalInterface[funcName];
    if (typeof jsFunc == "function")
        return jsFunc;
    else
        return function() {};
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}

function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.puzzles === undefined) {
            obj.userData.puzzles = {}
        }
        if (obj.userData.puzzles.rotationInterface === undefined) {
            obj.userData.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});

// getObjTransform puzzle
function getObjTransform(objName, isWorldSpace, mode, coord) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;

    var coordSystem = getCoordSystem();

    var transformVal;

    if (isWorldSpace && obj.parent) {
        if (mode === 'position') {
            transformVal = coordsTransform(obj.getWorldPosition(_pGlob.vec3Tmp), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        } else if (mode === 'rotation') {
            transformVal = coordsTransform(obj.getWorldEuler(_pGlob.eulerTmp, 'XYZ'), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        } else if (mode === 'scale') {
            transformVal = coordsTransform(obj.getWorldScale(_pGlob.vec3Tmp), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        }

    } else if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
        transformVal = eulerV3DToBlenderShortest(obj.rotation,
                _pGlob.eulerTmp);

    } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);

    } else {
        transformVal = coordsTransform(obj[mode].clone(), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
    }

    if (mode === 'rotation') {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
    }

    if (coord == 'xyz') {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
    } else {
        return transformVal[coord];
    }
}

// toFixedPoint puzzle
function toFixedPoint(num, prec) {
    prec = Math.pow(10, prec);
    return Math.round(num * prec)/prec;
}

// Describe this function...
function turnleft2() {

  operateAnimation('SET_SPEED', 'Armtourelle', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Armtourelle', null, null, 'AUTO', 1,
          function() {}, false);

      turnleft = 'turnleft';
}

// Describe this function...
function turnright2() {

  operateAnimation('SET_SPEED', 'Armtourelle', null, null, 'AUTO', 1,
          function() {}, true);


  operateAnimation('RESUME', 'Armtourelle', null, null, 'AUTO', 1,
          function() {}, false);

      turnright = 'turnright';
}

// Describe this function...
function boomraise2() {

  operateAnimation('SET_SPEED', 'Armbras', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('SET_SPEED', 'Armtablier', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Armbras', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Armtablier', null, null, 'AUTO', 1,
          function() {}, false);

      boomraise = 'boomraise';
  onAnimationFrameDo('Armbras', 340, function() {

    operateAnimation('PAUSE', 'Armbras', null, null, 'AUTO', 1,
            function() {}, false);


    operateAnimation('PAUSE', 'Armtablier', null, null, 'AUTO', 1,
            function() {}, false);

        });
}

// Describe this function...
function boomlower2() {
  if (contact == 'false') {

    operateAnimation('SET_SPEED', 'Armbras', null, null, 'AUTO', 1,
            function() {}, true);


    operateAnimation('SET_SPEED', 'Armtablier', null, null, 'AUTO', 1,
            function() {}, true);


    operateAnimation('RESUME', 'Armbras', null, null, 'AUTO', 1,
            function() {}, false);


    operateAnimation('RESUME', 'Armtablier', null, null, 'AUTO', 1,
            function() {}, false);

        boomlower = 'boomlower';
  }
  registerEveryFrame(function() {
    if (contact == 'true') {

      operateAnimation('PAUSE', 'Armbras', null, null, 'AUTO', 1,
              function() {}, false);


      operateAnimation('PAUSE', 'Armtablier', null, null, 'AUTO', 1,
              function() {}, false);

          }
  });
}

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

// Describe this function...
function telesextend2() {
  if (contact == 'false') {

    operateAnimation('SET_SPEED', 'Armtelescope', null, null, 'AUTO', 1,
            function() {}, false);


    operateAnimation('SET_SPEED', 'Cam', null, null, 'AUTO', 1,
            function() {}, false);


    operateAnimation('RESUME', 'Armtelescope', null, null, 'AUTO', 1,
            function() {}, false);


    operateAnimation('RESUME', 'Cam', null, null, 'AUTO', 1,
            function() {}, false);

        registerEveryFrame(function() {
      tweenCamera('', 'Empty', 0.01, function() {}, 0);
    });
    onAnimationFrameDo('Armtourelle', 172, function() {

      operateAnimation('PAUSE', 'Armtourelle', null, null, 'AUTO', 1,
              function() {}, false);


      operateAnimation('PAUSE', 'Cam', null, null, 'AUTO', 1,
              function() {}, false);

          });
    telesextend = 'telesextend';
  }
  registerEveryFrame(function() {
    if (contact == 'true') {
      if (!(telesretract == 'telesretract')) {

        operateAnimation('PAUSE', 'Armtelescope', null, null, 'AUTO', 1,
                function() {}, false);


        operateAnimation('PAUSE', 'Cam', null, null, 'AUTO', 1,
                function() {}, false);

            }
    }
  });
}

// Describe this function...
function telesretract2() {

  operateAnimation('SET_SPEED', 'Armtelescope', null, null, 'AUTO', 1,
          function() {}, true);


  operateAnimation('SET_SPEED', 'Cam', null, null, 'AUTO', 1,
          function() {}, true);


  operateAnimation('RESUME', 'Armtelescope', null, null, 'AUTO', 1,
          function() {}, false);


  operateAnimation('RESUME', 'Cam', null, null, 'AUTO', 1,
          function() {}, false);

      onAnimationFrameDo('Armtelescope', 172, function() {

    operateAnimation('RESUME', 'Armtelescope', null, null, 'AUTO', 1,
            function() {}, false);


    operateAnimation('RESUME', 'Cam', null, null, 'AUTO', 1,
            function() {}, false);

        });
  registerEveryFrame(function() {
    tweenCamera('', 'Empty', 0.01, function() {}, 0);
  });
  onAnimationFrameDo('Armtelescope', 0, function() {

    operateAnimation('PAUSE', 'Armtelescope', null, null, 'AUTO', 1,
            function() {}, false);


    operateAnimation('PAUSE', 'Cam', null, null, 'AUTO', 1,
            function() {}, false);

        });
  telesretract = 'telesretract';
}

// Describe this function...
function boomlowerdeact2() {
  boomlowerdeact = 'vrai';
}

// Describe this function...
function boomclicked2() {
  boomclicked = 'Vrai';
  outline(['GROUP', 'Tourelle'], 'ENABLE');
}

// Describe this function...
function boomloweract() {
  boomlowerdeact = 'faux';
}

// Describe this function...
function boomnotclicked() {
  boomclicked = 'Faux';
  outline(['GROUP', 'Tourelle'], 'DISABLE');
}

// Describe this function...
function boomraisedeact2() {
  boomraisedeact = 'vrai';
}

// Describe this function...
function chassisclicked2() {
  chassisclicked = 'Vrai';
  outline('Chassis', 'ENABLE');
}

// Describe this function...
function boomraiseact() {
  boomraisedeact = 'faux';
}

// Describe this function...
function telesextenddeact2() {
  telesextenddeact = 'vrai';
}

// Describe this function...
function chassisnotclicked() {
  chassisclicked = 'Faux';
  outline('Chassis', 'DISABLE');
}

// Describe this function...
function telesextendact() {
  telesextenddeact = 'faux';
}

// Describe this function...
function aucunclicked2() {
  aucunclicked = 'Vrai';
  outline(['GROUP', 'Tourelle'], 'DISABLE');
  outline('Chassis', 'DISABLE');
}

// Describe this function...
function telesretractdeact2() {
  telesretractdeact = 'vrai';
}

// Describe this function...
function telesretractact() {
  telesretractdeact = 'faux';
}

// Describe this function...
function aucunnotclicked() {
  aucunclicked = 'Faux';
}

// Describe this function...
function stabraisedeact2() {
  stabraisedeact = 'vrai';
}

// Describe this function...
function stabraiseact() {
  stabraisedeact = 'faux';
}

// Describe this function...
function stablowerdeact2() {
  stablowerdeact = 'vrai';
}

// Describe this function...
function stabloweract() {
  stablowerdeact = 'faux';
}


eventHTMLElem('mousedown', ['WINDOW'], false, function(event) {
  button = getEventProperty('button', event);
});
registerOnDrag('Cube.001', true, [0,1,2], function() {}, function() {
  if (button == 0) {
    dragRotate('Cube.001', 'Z', true, 'Ym:EIUnc_NvKd#$V==fG', 'G7sNFwUZ^9Y~1ZYkv=dW');
    objConstraintAddCopy('myConst', 'Cube.001', 'Empty.003', 'ROT');
  }
}, function() {}, 'G7sNFwUZ^9Y~1ZYkv=dW');


operateAnimation('PAUSE', 'Armchassis', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Armtourelle', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('SET_FRAME', 'Armbras', 4, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Armbras', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('SET_FRAME', 'Armtablier', 4, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Armtablier', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Armtelescope', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('PAUSE', 'Cam', null, null, 'AUTO', 1,
        function() {}, false);

    if (isObjectVisible('Loading')) {
  if (getAnimationFrame('Armbras') == 4) {
    registerSetTimeout(1, function() {
      changeVis('Loading', false);
    });
  }
}

turnleft = 'stop';
turnright = 'stop';
stablower = 'stop';
stabraise = 'stop';
boomraise = 'stop';
boomlower = 'stop';
telesextend = 'stop';
telesretract = 'stop';
boomclicked = 'Faux';
boomlowerdeact = 'faux';
boomraisedeact = 'faux';
telesextenddeact = 'faux';
telesretractdeact = 'faux';
stabraisedeact = 'faux';
stablowerdeact = 'faux';
registerOnClick('Empty.002', false, false, [0,1,2], function() {
  if (turnleft == 'stop') {
    turnleft2();
    getJSFunction('passvariableturnleft')();
  } else {
    stop2();
    getJSFunction('passvariablestop')();
  }
}, function() {});
registerOnClick('Empty.002', false, false, [0,1,2], function() {
  if (turnright == 'stop') {
    turnright2();
    getJSFunction('passvariableturnright')();
  } else {
    stop2();
    getJSFunction('passvariablestop')();
  }
}, function() {});
registerOnClick('Empty.002', false, false, [0,1,2], function() {
  if (stablower == 'stop') {
    stablower2();
    getJSFunction('passvariablestablower')();
  } else {
    stop2();
    getJSFunction('passvariablestop')();
  }
}, function() {});
registerOnClick('Empty.002', false, false, [0,1,2], function() {
  if (stabraise == 'stop') {
    stabraise2();
    getJSFunction('passvariablestabraise')();
  } else {
    stop2();
    getJSFunction('passvariablestop')();
  }
}, function() {});
registerOnClick('Empty.002', false, false, [0,1,2], function() {
  if (boomraise == 'stop') {
    boomraise2();
    getJSFunction('passvariableboomraise')();
  } else {
    stop2();
    getJSFunction('passvariablestop')();
  }
}, function() {});
registerOnClick('Empty.002', false, false, [0,1,2], function() {
  if (boomlower == 'stop') {
    boomlower2();
    getJSFunction('passvariableboomlower')();
  } else {
    stop2();
    getJSFunction('passvariablestop')();
  }
}, function() {});
registerOnClick('Empty.002', false, false, [0,1,2], function() {
  if (telesextend == 'stop') {
    telesextend2();
    getJSFunction('passvariabletelesextend')();
  } else {
    stop2();
    getJSFunction('passvariablestop')();
  }
}, function() {});
registerOnClick('Empty.002', false, false, [0,1,2], function() {
  if (telesretract == 'stop') {
    telesretract2();
    getJSFunction('passvariabletelesretract')();
  } else {
    stop2();
    getJSFunction('passvariablestop')();
  }
}, function() {});
registerOnClick('Chassis', true, true, [0], function() {
  chassisclicked2();
  getJSFunction('passvariablechassisclicked')();
  aucunnotclicked();
  getJSFunction('passvariableaucunnotclicked')();
  outline('Chassis', 'ENABLE');
}, function() {
  chassisnotclicked();
  getJSFunction('passvariablechassisnotclicked')();
  outline('Chassis', 'DISABLE');
});
registerOnClick(['GROUP', 'Tourelle'], true, true, [0], function() {
  boomclicked2();
  getJSFunction('passvariableboomclicked')();
  chassisnotclicked();
  getJSFunction('passvariablechassisnotclicked')();
  aucunnotclicked();
  getJSFunction('passvariableaucunnotclicked')();
  outline(['GROUP', 'Tourelle'], 'ENABLE');
  outline('Chassis', 'DISABLE');
}, function() {
  boomnotclicked();
  getJSFunction('passvariableboomnotclicked')();
  outline(['GROUP', 'Tourelle'], 'DISABLE');
});
registerEveryFrame(function() {
  if (boomclicked == 'Faux' && chassisclicked == 'Faux') {
    aucunclicked2();
    getJSFunction('passvariableaucunclicked')();
    outline('Chassis', 'DISABLE');
    outline(['GROUP', 'Tourelle'], 'DISABLE');
  }
});
registerOnClick('Empty.002', false, false, [0,1,2], function() {
  if (boomclicked == 'Faux') {
    boomclicked2();
    getJSFunction('passvariableboomclicked')();
    chassisnotclicked();
    getJSFunction('passvariablechassisnotclicked')();
    aucunnotclicked();
    getJSFunction('passvariableaucunnotclicked')();
  }
  if (chassisclicked == 'Faux') {
    chassisclicked2();
    getJSFunction('passvariablechassisclicked')();
    boomnotclicked();
    getJSFunction('passvariableboomnotclicked')();
    aucunnotclicked();
    getJSFunction('passvariableaucunnotclicked')();
  }
  if (aucunclicked == 'Faux') {
    aucunclicked2();
    getJSFunction('passvariableaucunclicked')();
    boomnotclicked();
    getJSFunction('passvariableboomnotclicked')();
    chassisnotclicked();
    getJSFunction('passvariablechassisnotclicked')();
  }
}, function() {});
registerEveryFrame(function() {
  if (getObjTransform('Empty.004', true, 'position', 'z') >= getObjTransform('Empty.003', true, 'position', 'z')) {
    contact = 'false';
  } else {
    contact = 'true';
  }
  if (toFixedPoint(getObjTransform('Empty.003', true, 'position', 'z'), 3) == toFixedPoint(getObjTransform('Empty.005', true, 'position', 'z'), 3)) {
    contactwheel = 'true';
  } else {
    contactwheel = 'false';
  }
});
eventHTMLElem('mousedown', ['BODY'], true, function(event) {
  registerEveryFrame(function() {
    if (contact == 'true' || getAnimationFrame('Armbras') < 1) {
      boomlowerdeact2();
      getJSFunction('passvariableboomlowerdeact')();
    } else {
      boomloweract();
      getJSFunction('passvariableboomloweract')();
    }
    if (getAnimationFrame('Armbras') > 339) {
      boomraisedeact2();
      getJSFunction('passvariableboomraisedeact')();
    } else {
      boomraiseact();
      getJSFunction('passvariableboomraiseact')();
    }
    if (contact == 'true' || getAnimationFrame('Armtelescope') > 171) {
      telesextenddeact2();
      getJSFunction('passvariabletelesextenddeact')();
    } else {
      telesextendact();
      getJSFunction('passvariabletelesextendact')();
    }
    if (getAnimationFrame('Armtelescope') < 1) {
      telesretractdeact2();
      getJSFunction('passvariabletelesretractdeact')();
    } else {
      telesretractact();
      getJSFunction('passvariabletelesretractact')();
    }
    if (getAnimationFrame('Armchassis') > 232) {
      stabraisedeact2();
      getJSFunction('passvariablestabraisedeact')();
    } else {
      stabraiseact();
      getJSFunction('passvariablestabraiseact')();
    }
    if (contact2 == 'true' || getAnimationFrame('Armchassis') < 1) {
      stablowerdeact2();
      getJSFunction('passvariablestablowerdeact')();
    } else {
      stabloweract();
      getJSFunction('passvariablestabloweract')();
    }
  });
});



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
