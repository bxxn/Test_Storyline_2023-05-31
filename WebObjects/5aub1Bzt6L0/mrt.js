/* __V3D_TEMPLATE__ - template-based file; delete this line to prevent this file from being updated */

'use strict';

window.addEventListener('load', e => {
    const params = v3d.AppUtils.getPageParams();
    createApp({
        containerId: 'v3d-container',
        fsButtonId: 'fullscreen-button',
        sceneURL: params.load || '__URL__mrt.gltf'.replace('__URL__', ''),
        logicURL: params.logic || '__LOGIC__visual_logic.js'.replace('__LOGIC__', ''),
    });
});

async function createApp({containerId, fsButtonId = null, sceneURL, logicURL = ''}) {
    if (!sceneURL) {
        console.log('No scene URL specified');
        return;
    }

    // some puzzles can benefit from cache
    v3d.Cache.enabled = true;

    let PL = null, PE = null;
    if (v3d.AppUtils.isXML(logicURL)) {
        const PUZZLES_DIR = '/puzzles/';
        const logicURLJS = logicURL.match(/(.*)\.xml$/)[1] + '.js';
        PL = await new v3d.PuzzlesLoader().loadEditorWithLogic(PUZZLES_DIR, logicURLJS);
        PE = v3d.PE;
    } else if (v3d.AppUtils.isJS(logicURL)) {
        PL = await new v3d.PuzzlesLoader().loadLogic(logicURL);
    }

    let initOptions = { useFullscreen: true };
    if (PL) {
        initOptions = PL.execInitPuzzles({ container: containerId }).initOptions;
    }
    sceneURL = initOptions.useCompAssets ? `${sceneURL}.xz` : sceneURL;

    const disposeFullscreen = prepareFullscreen(containerId, fsButtonId,
            initOptions.useFullscreen);
    const preloader = createPreloader(containerId, initOptions, PE);

    const app = createAppInstance(containerId, initOptions, preloader, PE);
    app.addEventListener('dispose', () => disposeFullscreen?.());

    if (initOptions.preloaderStartCb) initOptions.preloaderStartCb();
    app.loadScene(sceneURL, () => {
        app.enableControls();
        app.run();

        if (PE) PE.updateAppInstance(app);
        if (PL) PL.init(app, initOptions);

        runCode(app, PL);
    }, null, () => {
        console.log(`Can't load the scene ${sceneURL}`);
    });

    return { app, PL };
}


function createPreloader(containerId, initOptions, PE) {
    const preloader = initOptions.useCustomPreloader
            ? createCustomPreloader(initOptions.preloaderProgressCb,
            initOptions.preloaderEndCb)
            : new v3d.SimplePreloader({ container: containerId });

    if (PE) puzzlesEditorPreparePreloader(preloader, PE);

    return preloader;
}

function createCustomPreloader(updateCb, finishCb) {
    function CustomPreloader() {
        v3d.Preloader.call(this);
    }

    CustomPreloader.prototype = Object.assign(Object.create(v3d.Preloader.prototype), {
        onUpdate: function(percentage) {
            v3d.Preloader.prototype.onUpdate.call(this, percentage);
            if (updateCb) updateCb(percentage);
        },
        onFinish: function() {
            v3d.Preloader.prototype.onFinish.call(this);
            if (finishCb) finishCb();
        }
    });

    return new CustomPreloader();
}

/**
 * Modify the app's preloader to track the loading process in the Puzzles Editor.
 */
function puzzlesEditorPreparePreloader(preloader, PE) {
    const _onUpdate = preloader.onUpdate.bind(preloader);
    preloader.onUpdate = function(percentage) {
        _onUpdate(percentage);
        PE.loadingUpdateCb(percentage);
    }

    const _onFinish = preloader.onFinish.bind(preloader);
    preloader.onFinish = function() {
        _onFinish();
        PE.loadingFinishCb();
    }
}


function createAppInstance(containerId, initOptions, preloader, PE) {
    const ctxSettings = {};
    if (initOptions.useBkgTransp) ctxSettings.alpha = true;
    if (initOptions.preserveDrawBuf) ctxSettings.preserveDrawingBuffer = true;

    const app = new v3d.App(containerId, ctxSettings, preloader);
    if (initOptions.useBkgTransp) {
        app.clearBkgOnLoad = true;
        if (app.renderer) {
            app.renderer.setClearColor(0x000000, 0);
        }
    }

    // namespace for communicating with code generated by Puzzles
    app.ExternalInterface = {};
    prepareExternalInterface(app);
    if (PE) PE.viewportUseAppInstance(app);

    return app;
}


function prepareFullscreen(containerId, fsButtonId, useFullscreen) {
    const container = document.getElementById(containerId);
    const fsButton = document.getElementById(fsButtonId);

    if (!fsButton) {
        return null;
    }
    if (!useFullscreen) {
        if (fsButton) fsButton.style.display = 'none';
        return null;
    }

    const fsEnabled = () => document.fullscreenEnabled
            || document.webkitFullscreenEnabled
            || document.mozFullScreenEnabled
            || document.msFullscreenEnabled;
    const fsElement = () => document.fullscreenElement
            || document.webkitFullscreenElement
            || document.mozFullScreenElement
            || document.msFullscreenElement;
    const requestFs = elem => (elem.requestFullscreen
            || elem.mozRequestFullScreen
            || elem.webkitRequestFullscreen
            || elem.msRequestFullscreen).call(elem);
    const exitFs = () => (document.exitFullscreen
            || document.mozCancelFullScreen
            || document.webkitExitFullscreen
            || document.msExitFullscreen).call(document);
    const changeFs = () => {
        const elem = fsElement();
        fsButton.classList.add(elem ? 'fullscreen-close' : 'fullscreen-open');
        fsButton.classList.remove(elem ? 'fullscreen-open' : 'fullscreen-close');
    };

    function fsButtonClick(event) {
        event.stopPropagation();
        if (fsElement()) {
            exitFs();
        } else {
            requestFs(container);
        }
    }

    if (fsEnabled()) fsButton.style.display = 'inline';

    fsButton.addEventListener('click', fsButtonClick);
    document.addEventListener('webkitfullscreenchange', changeFs);
    document.addEventListener('mozfullscreenchange', changeFs);
    document.addEventListener('msfullscreenchange', changeFs);
    document.addEventListener('fullscreenchange', changeFs);

    const disposeFullscreen = () => {
        fsButton.removeEventListener('click', fsButtonClick);
        document.removeEventListener('webkitfullscreenchange', changeFs);
        document.removeEventListener('mozfullscreenchange', changeFs);
        document.removeEventListener('msfullscreenchange', changeFs);
        document.removeEventListener('fullscreenchange', changeFs);
    }

    return disposeFullscreen;
}

//Verge passing variable to Storyline
function prepareExternalInterface(app) {
    app.ExternalInterface.passvariableturnleft = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("variable","turnleft");
    return myVar; 
    }
    app.ExternalInterface.passvariableturnright = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("variable","turnright");
    return myVar; 
    }
    app.ExternalInterface.passvariablestablower = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("variable","stablower");
    return myVar; 
    }
    app.ExternalInterface.passvariablestabraise = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("variable","stabraise");
    return myVar; 
    }
    app.ExternalInterface.passvariableboomraise = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("variable","boomraise");
    return myVar; 
    }
    app.ExternalInterface.passvariableboomlower = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("variable","boomlower");
    return myVar; 
    }
    app.ExternalInterface.passvariabletelesextend = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("variable","telesextend");
    return myVar; 
    }
    app.ExternalInterface.passvariabletelesretract = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("variable","telesretract");
    return myVar; 
    }
    app.ExternalInterface.passvariablestop = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("variable","stop");
    return myVar; 
    }
    app.ExternalInterface.passvariableboomclicked = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("boomclicked","Vrai");
    return myVar;
    }
    app.ExternalInterface.passvariableboomnotclicked = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("boomclicked","Faux");
    return myVar;
    }
    app.ExternalInterface.passvariablechassisclicked = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("chassisclicked","Vrai");
    return myVar;
    }
    app.ExternalInterface.passvariablechassisnotclicked = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("chassisclicked","Faux");
    return myVar;
    }
    app.ExternalInterface.passvariableaucunclicked = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("aucunclicked","Vrai");
    return myVar;
    }
    app.ExternalInterface.passvariableaucunnotclicked = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("aucunclicked","Faux");
    return myVar;
    }
    app.ExternalInterface.passvariableboomlowerdeact = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("boomlowerdeact","vrai");
    return myVar;
    }
    app.ExternalInterface.passvariableboomloweract = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("boomlowerdeact","faux");
    return myVar;
    }
    app.ExternalInterface.passvariableboomraisedeact = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("boomraisedeact","vrai");
    return myVar;
    }
    app.ExternalInterface.passvariableboomraiseact = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("boomraisedeact","faux");
    return myVar;
    }
    app.ExternalInterface.passvariabletelesextenddeact = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("telesextenddeact","vrai");
    return myVar;
    }
    app.ExternalInterface.passvariabletelesextendact = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("telesextenddeact","faux");
    return myVar;
    }
    app.ExternalInterface.passvariabletelesretractdeact = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("telesretractdeact","vrai");
    return myVar;
    }
    app.ExternalInterface.passvariabletelesretractact = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("telesretractdeact","faux");
    return myVar;
    }
    app.ExternalInterface.passvariablestabraisedeact = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("stabraisedeact","vrai");
    return myVar;
    }
    app.ExternalInterface.passvariablestabraiseact = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("stabraisedeact","faux");
    return myVar;
    }
    app.ExternalInterface.passvariablestablowerdeact = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("stablowerdeact","vrai");
    return myVar;
    }
    app.ExternalInterface.passvariablestabloweract = function() {
    var player=parent.GetPlayer();
    var myVar = player.SetVar("stablowerdeact","faux");
    return myVar;
    }
}

//Storyline calls come here to trigger Verge procedure.
function runCode(app) {
    window.turnleft = function() {
     v3d.puzzles.procedures.turnleft();
    }
    window.turnright = function() {
     v3d.puzzles.procedures.turnright();
    }
    window.stablower = function() {
     v3d.puzzles.procedures.stablower();
    }
    window.stabraise = function() {
     v3d.puzzles.procedures.stabraise();
    }
    window.boomraise = function() {
    v3d.puzzles.procedures.boomraise();
    }
    window.boomlower = function() {
     v3d.puzzles.procedures.boomlower();
    }
    window.telesextend = function() {
     v3d.puzzles.procedures.telesextend();
    }
    window.telesretract = function() {
     v3d.puzzles.procedures.telesretract();
    }
    window.stop = function() {
     v3d.puzzles.procedures.stop();
    }
    window.boomclicked = function() {
     v3d.puzzles.procedures.boomclicked();
    }
    window.boomnotclicked = function() {
     v3d.puzzles.procedures.boomnotclicked();
    }
    window.chassisclicked = function() {
     v3d.puzzles.procedures.chassisclicked();
    }
    window.chassisnotclicked = function() {
     v3d.puzzles.procedures.chassisnotclicked();
    }
    window.aucunclicked = function() {
     v3d.puzzles.procedures.aucunclicked();
    }
    window.aucunnotclicked = function() {
     v3d.puzzles.procedures.aucunnotclicked();
    }
    window.boomlowerdeact = function() {
     v3d.puzzles.procedures.boomlowerdeact();
    }
    window.boomloweract = function() {
     v3d.puzzles.procedures.boomloweract();
    }
    window.boomraisedeact = function() {
     v3d.puzzles.procedures.boomraisedeact();
    }
    window.boomraiseact = function() {
     v3d.puzzles.procedures.boomraiseact();
    }
    window.telesextenddeact = function() {
     v3d.puzzles.procedures.telesextenddeact();
    }
    window.telesextendact = function() {
     v3d.puzzles.procedures.telesextendact();
    }
    window.telesretractdeact = function() {
     v3d.puzzles.procedures.telesretractdeact();
    }
    window.telesretractact = function() {
     v3d.puzzles.procedures.telesretractact();
    }
    window.stabraisedeact = function() {
     v3d.puzzles.procedures.stabraisedeact();
    }
    window.stabraiseact = function() {
     v3d.puzzles.procedures.stabraiseact();
    }
    window.stablowerdeact = function() {
     v3d.puzzles.procedures.stablowerdeact();
    }
    window.stabloweract = function() {
     v3d.puzzles.procedures.stabloweract();
    }
}
